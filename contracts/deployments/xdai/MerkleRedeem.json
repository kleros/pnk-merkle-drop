{
  "address": "0xf1A9589880DbF393F32A5b2d5a0054Fa10385074",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_claimant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidityProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_begin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "claimStatus",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidityProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_week",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_claimedBalance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claimWeek",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidityProvider",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "week",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct MerkleRedeem.Claim[]",
          "name": "claims",
          "type": "tuple[]"
        }
      ],
      "name": "claimWeeks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_begin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "merkleRoots",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_week",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_totalAllocation",
          "type": "uint256"
        }
      ],
      "name": "seedAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidityProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_week",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_claimedBalance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "weekMerkleRoots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfec65038545c90701fd1652336b42c5ee4ecc2ccf9ce4177dd79294139d5d87a",
  "receipt": {
    "to": null,
    "from": "0xd52345cc4845f90933849f4bd6f05Db47271dd2b",
    "contractAddress": "0xf1A9589880DbF393F32A5b2d5a0054Fa10385074",
    "transactionIndex": 8,
    "gasUsed": "921274",
    "logsBloom": "0x
    "blockHash": "0x271923f2f8f794faf4963f1482c0d3895a92d373469a5c12593702806a17f78d",
    "transactionHash": "0xfec65038545c90701fd1652336b42c5ee4ecc2ccf9ce4177dd79294139d5d87a",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 17876362,
        "transactionHash": "0xfec65038545c90701fd1652336b42c5ee4ecc2ccf9ce4177dd79294139d5d87a",
        "address": "0xf1A9589880DbF393F32A5b2d5a0054Fa10385074",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d52345cc4845f90933849f4bd6f05db47271dd2b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x271923f2f8f794faf4963f1482c0d3895a92d373469a5c12593702806a17f78d"
      }
    ],
    "blockNumber": 17876362,
    "cumulativeGasUsed": "3242318",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcb3231aBA3b451343e0Fddfc45883c842f223846"
  ],
  "solcInputHash": "d4877a002975406a2453170cccec33dc",
  "metadata": "{\"compiler\":{\"version\":\"0.6.8+commit.0bbfe453\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_begin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"claimStatus\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_week\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedBalance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimWeek\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MerkleRedeem.Claim[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"claimWeeks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_begin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"merkleRoots\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_week\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_totalAllocation\",\"type\":\"uint256\"}],\"name\":\"seedAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_week\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedBalance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weekMerkleRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"claimStatus(address,uint256,uint256)\":{\"params\":{\"_begin\":\"The week to start with (inclusive).\",\"_end\":\"The week to end with (inclusive).\",\"_liquidityProvider\":\"The address of the claimant.\"}},\"claimWeek(address,uint256,uint256,bytes32[])\":{\"params\":{\"_claimedBalance\":\"The amount being claimed.\",\"_liquidityProvider\":\"The address of the claimant.\",\"_merkleProof\":\"The merkle proof for the claim, sorted from the leaf to the root of the tree.\",\"_week\":\"The week for the claim.\"}},\"claimWeeks(address,(uint256,uint256,bytes32[])[])\":{\"params\":{\"_liquidityProvider\":\"The address of the claimant.\",\"claims\":\"An array of claims containing the week, balance and the merkle proof.\"}},\"constructor\":{\"params\":{\"_token\":\"The address of the token being distributed.\"}},\"merkleRoots(uint256,uint256)\":{\"params\":{\"_begin\":\"The week to start with (inclusive).\",\"_end\":\"The week to end with (inclusive).\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"seedAllocations(uint256,bytes32,uint256)\":{\"details\":\"Will transfer tokens from the owner to this contract.\",\"params\":{\"_merkleRoot\":\"The merkle root of the claims for that period.\",\"_totalAllocation\":\"The amount of tokens allocated for the distribution.\",\"_week\":\"The airdrop week.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verifyClaim(address,uint256,uint256,bytes32[])\":{\"params\":{\"_claimedBalance\":\"The amount being claimed.\",\"_liquidityProvider\":\"The address of the claimant.\",\"_merkleProof\":\"The merkle proof for the claim, sorted from the leaf to the root of the tree.\",\"_week\":\"The week for the claim.\"}}},\"title\":\"Distribution of tokens in a recurrent fashion.\"},\"userdoc\":{\"methods\":{\"claimStatus(address,uint256,uint256)\":{\"notice\":\"Gets the claim status for given claimant from `_begin` to `_end` weeks.\"},\"claimWeek(address,uint256,uint256,bytes32[])\":{\"notice\":\"Makes a claim for a given claimant in a week.\"},\"claimWeeks(address,(uint256,uint256,bytes32[])[])\":{\"notice\":\"Makes multiple claims for a given claimant.\"},\"merkleRoots(uint256,uint256)\":{\"notice\":\"Gets all merkle roots for from `_begin` to `_end` weeks.\"},\"seedAllocations(uint256,bytes32,uint256)\":{\"notice\":\"Seeds a new round for the airdrop.\"},\"verifyClaim(address,uint256,uint256,bytes32[])\":{\"notice\":\"Verifies a claim.\"}}}},\"settings\":{\"compilationTarget\":{\"src/MerkleRedeem.sol\":\"MerkleRedeem\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x782ac63a026ef1d6ab242478016bf7006074726786de9a94bc6c0c33a87dd40d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"src/MerkleRedeem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * Original code taken from: https://github.com/balancer-labs/erc20-redeemable/blob/13d478a043ec7bfce7abefe708d027dfe3e2ea84/merkle/contracts/MerkleRedeem.sol\\n * Only comments and events were added, some variable names changed for clarity and the compiler version was upgraded to 0.7.x.\\n *\\n * @reviewers: [@hbarcelos]\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n */\\npragma solidity 0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Distribution of tokens in a recurrent fashion.\\n */\\ncontract MerkleRedeem is Ownable {\\n    /// @dev The address of the token being distributed.\\n    IERC20 public token;\\n\\n    /**\\n     * @dev To be emitted when a claim is made.\\n     * @param _claimant The address of the claimant.\\n     * @param _balance The amount being claimed.\\n     */\\n    event Claimed(address _claimant, uint256 _balance);\\n\\n    /// @dev The merkle roots of each week. weekMerkleRoots[week].\\n    mapping(uint => bytes32) public weekMerkleRoots;\\n\\n    /// @dev Keeps track of the claim status for the given period and claimant. claimed[period][claimant].\\n    mapping(uint => mapping(address => bool)) public claimed;\\n\\n    /**\\n     * @param _token The address of the token being distributed.\\n     */\\n    constructor(\\n        address _token\\n    ) public {\\n        token = IERC20(_token);\\n    }\\n\\n    /**\\n     * @dev Effectively pays a claimant.\\n     * @param _liquidityProvider The address of the claimant.\\n     * @param _balance The amount being claimed.\\n     */\\n    function disburse(\\n        address _liquidityProvider,\\n        uint _balance\\n    )\\n        private\\n    {\\n        if (_balance > 0) {\\n            emit Claimed(_liquidityProvider, _balance);\\n            require(token.transfer(_liquidityProvider, _balance), \\\"ERR_TRANSFER_FAILED\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Makes a claim for a given claimant in a week.\\n     * @param _liquidityProvider The address of the claimant.\\n     * @param _week The week for the claim.\\n     * @param _claimedBalance The amount being claimed.\\n     * @param _merkleProof The merkle proof for the claim, sorted from the leaf to the root of the tree.\\n     */\\n    function claimWeek(\\n        address _liquidityProvider,\\n        uint _week,\\n        uint _claimedBalance,\\n        bytes32[] memory _merkleProof\\n    )\\n        public\\n    {\\n        require(!claimed[_week][_liquidityProvider]);\\n        require(verifyClaim(_liquidityProvider, _week, _claimedBalance, _merkleProof), 'Incorrect merkle proof');\\n\\n        claimed[_week][_liquidityProvider] = true;\\n        disburse(_liquidityProvider, _claimedBalance);\\n    }\\n\\n    struct Claim {\\n        // The week the claim is related to.\\n        uint week;\\n        // The amount being claimed.\\n        uint balance;\\n        // The merkle proof for the claim, sorted from the leaf to the root of the tree.\\n        bytes32[] merkleProof;\\n    }\\n\\n    /**\\n     * @notice Makes multiple claims for a given claimant.\\n     * @param _liquidityProvider The address of the claimant.\\n     * @param claims An array of claims containing the week, balance and the merkle proof.\\n     */\\n    function claimWeeks(\\n        address _liquidityProvider,\\n        Claim[] memory claims\\n    )\\n        public\\n    {\\n        uint totalBalance = 0;\\n        Claim memory claim ;\\n        for(uint i = 0; i < claims.length; i++) {\\n            claim = claims[i];\\n\\n            require(!claimed[claim.week][_liquidityProvider]);\\n            require(verifyClaim(_liquidityProvider, claim.week, claim.balance, claim.merkleProof), 'Incorrect merkle proof');\\n\\n            totalBalance += claim.balance;\\n            claimed[claim.week][_liquidityProvider] = true;\\n        }\\n        disburse(_liquidityProvider, totalBalance);\\n    }\\n\\n    /**\\n     * @notice Gets the claim status for given claimant from `_begin` to `_end` weeks.\\n     * @param _liquidityProvider The address of the claimant.\\n     * @param _begin The week to start with (inclusive).\\n     * @param _end The week to end with (inclusive).\\n     */\\n    function claimStatus(\\n        address _liquidityProvider,\\n        uint _begin,\\n        uint _end\\n    )\\n        external\\n        view\\n        returns (bool[] memory)\\n    {\\n        uint size = 1 + _end - _begin;\\n        bool[] memory arr = new bool[](size);\\n        for(uint i = 0; i < size; i++) {\\n            arr[i] = claimed[_begin + i][_liquidityProvider];\\n        }\\n        return arr;\\n    }\\n\\n    /**\\n     * @notice Gets all merkle roots for from `_begin` to `_end` weeks.\\n     * @param _begin The week to start with (inclusive).\\n     * @param _end The week to end with (inclusive).\\n     */\\n    function merkleRoots(\\n        uint _begin,\\n        uint _end\\n    )\\n        external\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        uint size = 1 + _end - _begin;\\n        bytes32[] memory arr = new bytes32[](size);\\n        for(uint i = 0; i < size; i++) {\\n            arr[i] = weekMerkleRoots[_begin + i];\\n        }\\n        return arr;\\n    }\\n\\n    /**\\n     * @notice Verifies a claim.\\n     * @param _liquidityProvider The address of the claimant.\\n     * @param _week The week for the claim.\\n     * @param _claimedBalance The amount being claimed.\\n     * @param _merkleProof The merkle proof for the claim, sorted from the leaf to the root of the tree.\\n     */\\n    function verifyClaim(\\n        address _liquidityProvider,\\n        uint _week,\\n        uint _claimedBalance,\\n        bytes32[] memory _merkleProof\\n    )\\n        public\\n        view\\n        returns (bool valid)\\n    {\\n        bytes32 leaf = keccak256(abi.encodePacked(_liquidityProvider, _claimedBalance));\\n        return MerkleProof.verify(_merkleProof, weekMerkleRoots[_week], leaf);\\n    }\\n\\n    /**\\n     * @notice Seeds a new round for the airdrop.\\n     * @dev Will transfer tokens from the owner to this contract.\\n     * @param _week The airdrop week.\\n     * @param _merkleRoot The merkle root of the claims for that period.\\n     * @param _totalAllocation The amount of tokens allocated for the distribution.\\n     */\\n    function seedAllocations(\\n        uint _week,\\n        bytes32 _merkleRoot,\\n        uint _totalAllocation\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(weekMerkleRoots[_week] == bytes32(0), \\\"cannot rewrite merkle root\\\");\\n        weekMerkleRoots[_week] = _merkleRoot;\\n\\n        require(token.transferFrom(msg.sender, address(this), _totalAllocation), \\\"ERR_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x8cedba0574e8ffffa5dd705f60aa6d363b8b832f15162ce67b8fc60268f6ec72\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b14610152578063c804c39a14610167578063dd8c9c9d1461017a578063eb0d07f51461019a578063f2fde38b146101ad578063fc0c546a146101c0576100b4565b8063120aa877146100b957806339436b00146100e257806347fb23c1146101025780634cd488ab1461012257806358b4e4b414610137578063715018a61461014a575b600080fd5b6100cc6100c7366004610bb6565b6101c8565b6040516100d99190610d2d565b60405180910390f35b6100f56100f0366004610c0d565b6101e8565b6040516100d99190610cf5565b610115610110366004610aeb565b61027e565b6040516100d99190610caf565b610135610130366004610be2565b610332565b005b610135610145366004610b1e565b61045f565b6101356104f4565b61015a61057d565b6040516100d99190610c5e565b610135610175366004610a4d565b61058c565b61018d610188366004610b9e565b61066d565b6040516100d99190610d38565b6100cc6101a8366004610b1e565b61067f565b6101356101bb366004610a2b565b6106d5565b61015a610795565b600360209081526000928352604080842090915290825290205460ff1681565b6060828203600101818167ffffffffffffffff8111801561020857600080fd5b50604051908082528060200260200182016040528015610232578160200160208202803683370190505b50905060005b8281101561027357858101600090815260026020526040902054825183908390811061026057fe5b6020908102919091010152600101610238565b509150505b92915050565b6060828203600101818167ffffffffffffffff8111801561029e57600080fd5b506040519080825280602002602001820160405280156102c8578160200160208202803683370190505b50905060005b828110156103285785810160009081526003602090815260408083206001600160a01b038b168452909152902054825160ff9091169083908390811061031057fe5b911515602092830291909101909101526001016102ce565b5095945050505050565b61033a6107a4565b6001600160a01b031661034b61057d565b6001600160a01b03161461037a5760405162461bcd60e51b815260040161037190610db7565b60405180910390fd5b600083815260026020526040902054156103a65760405162461bcd60e51b815260040161037190610e19565b6000838152600260205260409081902083905560015490516323b872dd60e01b81526001600160a01b03909116906323b872dd906103ec90339030908690600401610c72565b602060405180830381600087803b15801561040657600080fd5b505af115801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e9190610b7e565b61045a5760405162461bcd60e51b815260040161037190610dec565b505050565b60008381526003602090815260408083206001600160a01b038816845290915290205460ff161561048f57600080fd5b61049b8484848461067f565b6104b75760405162461bcd60e51b815260040161037190610d87565b60008381526003602090815260408083206001600160a01b03881684529091529020805460ff191660011790556104ee84836107a8565b50505050565b6104fc6107a4565b6001600160a01b031661050d61057d565b6001600160a01b0316146105335760405162461bcd60e51b815260040161037190610db7565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6000610596610928565b60005b8351811015610662578381815181106105ae57fe5b602090810291909101810151805160009081526003835260408082206001600160a01b038a168352909352919091205490925060ff16156105ee57600080fd5b6106068583600001518460200151856040015161067f565b6106225760405162461bcd60e51b815260040161037190610d87565b602080830151835160009081526003835260408082206001600160a01b038a16835290935291909120805460ff1916600190811790915593019201610599565b506104ee84836107a8565b60026020526000908152604090205481565b6000808584604051602001610695929190610c2e565b6040516020818303038152906040528051906020012090506106cb8360026000888152602001908152602001600020548361088b565b9695505050505050565b6106dd6107a4565b6001600160a01b03166106ee61057d565b6001600160a01b0316146107145760405162461bcd60e51b815260040161037190610db7565b6001600160a01b03811661073a5760405162461bcd60e51b815260040161037190610d41565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031681565b3390565b8015610887577fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a82826040516107df929190610c96565b60405180910390a160015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906108199085908590600401610c96565b602060405180830381600087803b15801561083357600080fd5b505af1158015610847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086b9190610b7e565b6108875760405162461bcd60e51b815260040161037190610dec565b5050565b600081815b855181101561091d5760008682815181106108a757fe5b602002602001015190508083116108e85782816040516020016108cb929190610c50565b604051602081830303815290604052805190602001209250610914565b80836040516020016108fb929190610c50565b6040516020818303038152906040528051906020012092505b50600101610890565b509092149392505050565b60405180606001604052806000815260200160008152602001606081525090565b80356001600160a01b038116811461027857600080fd5b600082601f830112610970578081fd5b813561098361097e82610e77565b610e50565b8181529150602080830190848101818402860182018710156109a457600080fd5b60005b848110156109c3578135845292820192908201906001016109a7565b505050505092915050565b6000606082840312156109df578081fd5b6109e96060610e50565b90508135815260208201356020820152604082013567ffffffffffffffff811115610a1357600080fd5b610a1f84828501610960565b60408301525092915050565b600060208284031215610a3c578081fd5b610a468383610949565b9392505050565b60008060408385031215610a5f578081fd5b610a698484610949565b915060208084013567ffffffffffffffff811115610a85578283fd5b80850186601f820112610a96578384fd5b80359150610aa661097e83610e77565b82815283810190828501865b85811015610adb57610ac98b8884358801016109ce565b84529286019290860190600101610ab2565b5096999098509650505050505050565b600080600060608486031215610aff578081fd5b610b098585610949565b95602085013595506040909401359392505050565b60008060008060808587031215610b33578081fd5b610b3d8686610949565b93506020850135925060408501359150606085013567ffffffffffffffff811115610b66578182fd5b610b7287828801610960565b91505092959194509250565b600060208284031215610b8f578081fd5b81518015158114610a46578182fd5b600060208284031215610baf578081fd5b5035919050565b60008060408385031215610bc8578182fd5b82359150610bd98460208501610949565b90509250929050565b600080600060608486031215610bf6578283fd5b505081359360208301359350604090920135919050565b60008060408385031215610c1f578182fd5b50508035926020909101359150565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b918252602082015260400190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015610ce9578351151583529284019291840191600101610ccb565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610ce957835183529284019291840191600101610d11565b901515815260200190565b90815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526016908201527524b731b7b93932b1ba1036b2b935b63290383937b7b360511b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526013908201527211549497d514905394d1915497d19052531151606a1b604082015260600190565b6020808252601a908201527f63616e6e6f742072657772697465206d65726b6c6520726f6f74000000000000604082015260600190565b60405181810167ffffffffffffffff81118282101715610e6f57600080fd5b604052919050565b600067ffffffffffffffff821115610e8d578081fd5b506020908102019056fea2646970667358221220296eac005c7f95edb24611c66f89fda0554fdb45eefce851f379d955ac72932064736f6c63430006080033",
  "devdoc": {
    "methods": {
      "claimStatus(address,uint256,uint256)": {
        "params": {
          "_begin": "The week to start with (inclusive).",
          "_end": "The week to end with (inclusive).",
          "_liquidityProvider": "The address of the claimant."
        }
      },
      "claimWeek(address,uint256,uint256,bytes32[])": {
        "params": {
          "_claimedBalance": "The amount being claimed.",
          "_liquidityProvider": "The address of the claimant.",
          "_merkleProof": "The merkle proof for the claim, sorted from the leaf to the root of the tree.",
          "_week": "The week for the claim."
        }
      },
      "claimWeeks(address,(uint256,uint256,bytes32[])[])": {
        "params": {
          "_liquidityProvider": "The address of the claimant.",
          "claims": "An array of claims containing the week, balance and the merkle proof."
        }
      },
      "constructor": {
        "params": {
          "_token": "The address of the token being distributed."
        }
      },
      "merkleRoots(uint256,uint256)": {
        "params": {
          "_begin": "The week to start with (inclusive).",
          "_end": "The week to end with (inclusive)."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "seedAllocations(uint256,bytes32,uint256)": {
        "details": "Will transfer tokens from the owner to this contract.",
        "params": {
          "_merkleRoot": "The merkle root of the claims for that period.",
          "_totalAllocation": "The amount of tokens allocated for the distribution.",
          "_week": "The airdrop week."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verifyClaim(address,uint256,uint256,bytes32[])": {
        "params": {
          "_claimedBalance": "The amount being claimed.",
          "_liquidityProvider": "The address of the claimant.",
          "_merkleProof": "The merkle proof for the claim, sorted from the leaf to the root of the tree.",
          "_week": "The week for the claim."
        }
      }
    },
    "title": "Distribution of tokens in a recurrent fashion."
  },
  "userdoc": {
    "methods": {
      "claimStatus(address,uint256,uint256)": {
        "notice": "Gets the claim status for given claimant from `_begin` to `_end` weeks."
      },
      "claimWeek(address,uint256,uint256,bytes32[])": {
        "notice": "Makes a claim for a given claimant in a week."
      },
      "claimWeeks(address,(uint256,uint256,bytes32[])[])": {
        "notice": "Makes multiple claims for a given claimant."
      },
      "merkleRoots(uint256,uint256)": {
        "notice": "Gets all merkle roots for from `_begin` to `_end` weeks."
      },
      "seedAllocations(uint256,bytes32,uint256)": {
        "notice": "Seeds a new round for the airdrop."
      },
      "verifyClaim(address,uint256,uint256,bytes32[])": {
        "notice": "Verifies a claim."
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/MerkleRedeem.sol:MerkleRedeem",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 292,
        "contract": "src/MerkleRedeem.sol:MerkleRedeem",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)258"
      },
      {
        "astId": 303,
        "contract": "src/MerkleRedeem.sol:MerkleRedeem",
        "label": "weekMerkleRoots",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 309,
        "contract": "src/MerkleRedeem.sol:MerkleRedeem",
        "label": "claimed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)258": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}